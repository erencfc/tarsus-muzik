generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Order {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  status OrderStatus @default(PENDING)
  items  OrderItem[]

  Coupon   Coupon? @relation(fields: [couponId], references: [id])
  couponId String? @db.ObjectId

  totalPrice    Float
  totalDiscount Float
  totalShipping Float

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  address   Address @relation(fields: [addressId], references: [id])
  addressId String  @db.ObjectId

  payment   Payment @relation(fields: [paymentId], references: [id])
  paymentId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

enum OrderStatus {
  PENDING
  CANCELLED
  COMPLETED
}

model Payment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  method    PaymentMethod
  Order     Order[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("payments")
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  Product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int

  orderId String @db.ObjectId
  Order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderItems")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  shipping  Int        @default(0)
  discount  Int        @default(0)
  Coupon    Coupon?    @relation(fields: [couponId], references: [id])
  couponId  String?    @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?    @unique @db.ObjectId

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartItems")
}

model Coupon {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  active        Boolean      @default(true)
  description   String?
  maxUse        Int?
  minPurchase   Int?
  code          String       @unique
  discount      Int
  discountType  DiscountType
  validFrom     DateTime     @default(now())
  validTo       DateTime?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  categoryId    String?      @db.ObjectId
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Cart          Cart[]
  Order         Order[]

  @@map("coupons")
}

enum DiscountType {
  PERCENT
  FIXED
}

model Product {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  Brand              Brand           @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId            String          @db.ObjectId
  model              String          @unique
  modelSlug          String          @unique
  images             String[]
  price              Int
  discountPrice      Int?
  description        String
  deliveryTimeMinDay Int
  deliveryTimeMaxDay Int
  stock              Int
  stockStatus        Boolean
  active             Boolean         @default(true)
  rating             Int             @default(0)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Category           Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         String          @db.ObjectId
  SubCategory        SubCategory     @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  subCategoryId      String          @db.ObjectId
  CartItem           CartItem[]
  Favorite           Favorite[]
  Comment            Comment[]
  DiscountAlert      DiscountAlert[]
  OrderItem          OrderItem[]
  DealerPrice        DealerPrice[]

  @@map("products")
}

model DiscountAlert {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  Product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String   @db.ObjectId
  currentPrice Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("discountAlerts")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  content   String?
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId

  @@map("comments")
}

model Category {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String        @unique
  slug        String        @unique
  color       Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]
  Product     Product[]
  Coupon      Coupon[]

  @@map("categories")
}

model SubCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String    @unique
  slug       String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String    @db.ObjectId
  Product    Product[]
  Coupon     Coupon[]

  @@map("subCategories")
}

model Brand {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("brands")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  Addresses     Address[]
  email         String          @unique
  tel           String          @unique
  password      String
  emailNoti     Boolean         @default(true)
  smsNoti       Boolean         @default(true)
  emailVerified DateTime?
  Favorite      Favorite[]
  Comment       Comment[]
  DiscountAlert DiscountAlert[]
  role          Role            @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Cart          Cart?
  Order         Order[]
  Dealer        Dealer?

  @@map("users")
}

enum Role {
  ADMIN
  USER
  DEALER
}

model Dealer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId

  prices DealerPrice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("dealers")
}

model DealerPrice {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  price Int

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId

  Dealer   Dealer @relation(fields: [dealerId], references: [id], onDelete: Cascade)
  dealerId String @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, dealerId])
  @@map("dealerPrices")
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("verificationTokens")
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, token])
  @@map("passwordResetTokens")
}

model Address {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  alias       String      @unique
  firstName   String
  lastName    String
  tel         String
  city        String
  town        String
  district    String
  details     String
  zipCode     String
  billing     Boolean     @default(false)
  billingType BillingType
  nationalId  String?
  companyName String?
  taxOffice   String?
  taxNumber   String?
  isCompany   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @db.ObjectId
  Order       Order[]

  @@map("addresses")
}

enum BillingType {
  PERSONAL
  CORPORATE
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId

  @@map("favorites")
}
